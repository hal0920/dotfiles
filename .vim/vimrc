" ============================================================================
" Init {{{
" ============================================================================
set encoding=utf-8
scriptencoding utf-8

syntax enable
filetype plugin indent on

if has('vim_starting')
  " Use vertical bar cursor in Insert mode
  let &t_SI .= "\e[6 q"
  " Use Block cursor in Normal mode
  let &t_EI .= "\e[2 q"
  " Use Underline cursor in Replace mode
  let &t_SR .= "\e[4 q"

  if exists('$TMUX')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif

" Disable default plugin
let g:loaded_gzip               = 1
let g:loaded_tar                = 1
let g:loaded_tarPlugin          = 1
let g:loaded_zip                = 1
let g:loaded_zipPlugin          = 1
let g:loaded_rrhelper           = 1
let g:loaded_vimball            = 1
let g:loaded_vimballPlugin      = 1
let g:loaded_getscript          = 1
let g:loaded_getscriptPlugin    = 1
let g:loaded_netrw              = 1
let g:loaded_netrwPlugin        = 1
let g:loaded_netrwSettings      = 1
let g:loaded_netrwFileHandlers  = 1
let g:did_install_default_menus = 1
let g:skip_loading_mswin        = 1
let g:did_install_syntax_menu   = 1
let g:loaded_2html_plugin       = 1

" map leader
let g:mapleader = "\<Space>"
let g:maplocalleader = ','

" markdown
let g:markdown_fenced_languages = [
\  'go',
\  'sh',
\  'json',
\  'yaml',
\  'java',
\]

" config directory
let g:my_config_dir = fnamemodify($MYVIMRC, ":h")

" }}}
" ============================================================================
" options {{{
" ============================================================================

" Encoding
set fileencodings=utf-8,cp932
set fileformats=unix,dos,mac

" Don't creat swap files
set nobackup
set noswapfile
set noundofile

" Appearance
set wildmenu
set display=lastline
set laststatus=2
set cursorline
set wrap
set list
set listchars=tab:\ \ ,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
set scrolloff=8
set synmaxcol=256
set showcmd
set signcolumn=yes
set noshowmode
set showtabline=0
set background=dark
set diffopt^=vertical

" buffer
set hidden
set switchbuf=useopen

" edit
set smarttab
set expandtab
set autoindent
set shiftwidth=4
set shiftround
set tabstop=4
set virtualedit=block,onemore
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start

" window
set splitbelow
set splitright
set winwidth=30
set winheight=1
set cmdwinheight=5
set noequalalways

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

" clipborad
set clipboard=unnamed

" Completion
set completeopt=menuone,noinsert,noselect
set shortmess+=c

" help
set helplang=ja,en

" vimfinfo
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo

" undo
if has("persistent_undo")
  set undodir=$XDG_CACHE_HOME/vim/.undodir
  set undofile
endif

" Use true color in terminal
if exists('&termguicolors')
  set termguicolors
endif

" Use popup window with complete
if has('textprop')
  set completeopt+=popup
endif

" grep
if executable('rg')
  let &grepprg = 'rg --vimgrep --hidden'
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" }}}
" ============================================================================
" mapping {{{
" ============================================================================

" reload vimrc
nnoremap <Space>s :source $MYVIMRC<CR>

" Clear search highlight
nnoremap <Esc><Esc> :nohlsearch<CR><Esc>

" Multi line move
noremap k gk
noremap j gj
noremap gk k
noremap gj j
noremap <Down> gj
noremap <Up> gk

" Move cursor like emacs in Insert Mode
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-a> <C-o>^
inoremap <C-e> <End>
inoremap <C-d> <Del>

" Move cursor like emacs in Insert Mode
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <HOME>
cnoremap <C-e> <END>

" Move cursor the begining and end of line
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $

" Move between windows
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W

" Not yank is delete operation
nnoremap x "_x

" Disable s operation
nnoremap s <Nop>
vnoremap s <Nop>

" Indent in visual and select mode automatically re-selects.
vnoremap > >gv
vnoremap < <gv

" Quit the current window
nnoremap <silent> <C-q> :q<CR>
inoremap <silent> <C-q> <Esc>:q<CR>
tnoremap <silent> <C-q> <C-w>N:q!<CR>

" open termianl in vertial split,new tab,current winddow
nnoremap ts :<C-u>terminal<CR>
nnoremap tv :<C-u>vsplit <BAR> terminal ++curwin<CR>
nnoremap tt :<C-u>tabnew <BAR> terminal ++curwin<CR>
nnoremap tw :<C-u>terminal ++curwin<CR>

" Use <C-w>ESC to transition to terminal normal mode
" tnoremap <C-w><ESC> <C-w>N

" Toggle options
nmap [Toggle] <Nop>
map <Leader>o [Toggle]
nnoremap <silent> [Toggle]n :<C-u>setlocal number! number?<CR>
nnoremap <silent> [Toggle]rn :<C-u>setlocal relativenumber! relativenumber?<CR>
nnoremap <silent> [Toggle]w :<C-u>setlocal wrap! wrap?<CR>
nnoremap <silent> [Toggle]p :<C-u>set paste! paste?<CR>

" Shortening for ++enc=
cnoreabbrev ++u ++enc=utf8
cnoreabbrev ++c ++enc=cp932
cnoreabbrev ++s ++enc=sjis

" quickfix
nnoremap <silent> [q :<C-u>cprev<CR>
nnoremap <silent> ]q :<C-u>cnext<CR>

function! ToggleQuickfix()
    let l:nr = winnr('$')
    cwindow
    let l:nr2 = winnr('$')
    if l:nr == l:nr2
        cclose
    endif
endfunction
nnoremap <script> <silent> Q :call ToggleQuickfix()<CR>

" }}}
" ============================================================================
" FileType {{{

" indent by FileType
augroup vimrc-ft-indent
  autocmd!
  autocmd FileType gitcommit setlocal spell spelllang=cjk,en
  autocmd FileType git setlocal nofoldenable
  autocmd FileType text setlocal textwidth=0
  autocmd FileType vim setlocal foldmethod=marker tabstop=2 shiftwidth=2
  autocmd FileType sh setlocal tabstop=2 shiftwidth=2
  autocmd FileType zsh setlocal tabstop=2 shiftwidth=2
augroup END

" quickfix
augroup vimrc-ft-quickfix
  autocmd!
  autocmd Filetype qf nnoremap <silent> <buffer> p <CR>zz<C-w>p
  autocmd Filetype qf nnoremap <silent> <buffer> q <C-w>c
augroup END

" vim help
augroup vimrc-ft-help
  autocmd!
  autocmd FileType help wincmd L
  autocmd FileType help nnoremap <silent> <buffer> q <C-w>c
augroup END

" }}}
" ============================================================================
" command {{{

" lazygit
if executable('lazygit')
  command! Lazygit tabnew | terminal ++curwin ++close lazygit
  nnoremap <silent> <Leader>gl :<C-u>Lazygit<CR>
endif

" }}}
" ============================================================================
" Plugin {{{

" Plugin list {{{
let s:start_plugs_global = [
  \ ['cocopon/iceberg.vim', {}],
  \ ['itchyny/lightline.vim', {}],
  \ ['vim-jp/vimdoc-ja', {}],
  \ ['cpohama/lexima.vim', {}],
  \ ['tpope/vim-commentary', {}],
  \ ['kana/vim-operator-user', {}],
  \ ['kana/vim-operator-replace', {}],
  \ ['machakann/vim-sandwich', {}],
  \ ['liuchengxu/vim-clap', {}],
  \ ['rhysd/git-messenger.vim', {}],
  \ ['mhinz/vim-signify', {}],
  \ ['simeji/winresizer', {}],
  \ ['glidenote/memolist.vim', {}],
  \ ['mbbill/undotree', {}],
  \ ['mattn/vim-findroot', {}],
  \ ]
let s:start_plugs_lsp = [
  \ ['prabirshrestha/async.vim', {'type': 'opt'}],
  \ ['prabirshrestha/vim-lsp', {'type': 'opt'}],
  \ ['mattn/vim-lsp-settings', {'type': 'opt'}],
  \ ['prabirshrestha/asyncomplete.vim', {'type': 'opt'}],
  \ ['prabirshrestha/asyncomplete-lsp.vim', {'type': 'opt'}],
  \ ['hrsh7th/vim-vsnip', {'type': 'opt'}],
  \ ['hrsh7th/vim-vsnip-integ', {'type': 'opt'}]
  \ ]
let s:opt_plugs_dev = [
  \ ['kana/vim-altr', {'type': 'opt'}],
  \ ['liuchengxu/vista.vim', {'type': 'opt'}],
  \ ['thinca/vim-quickrun', {'type': 'opt'}],
  \ ['janko/vim-test', {'type': 'opt'}],
  \ ]
let s:opt_plugs_markdown = [
  \ ['previm/previm', {'type': 'opt'}],
  \ ['dhruvasagar/vim-table-mode', {'type': 'opt'}],
  \ ['tyru/open-browser.vim', {'type': 'opt'}],
  \ ]
" }}}

" minpac {{{
if exists('*minpac#init')
  " load minpac.
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " add plugin.
  call map(
    \ s:start_plugs_global+s:start_plugs_lsp+s:opt_plugs_dev+s:opt_plugs_markdown,
    \ {_, val -> execute('call minpac#add("' . val[0] . '", ' . string(val[1]) . ')') }
    \ )
endif

" Define user commands for updating/cleaning the plugins.
command! PackUpdate packadd minpac | source $MYVIMRC | call minpac#update('', {'do': 'call minpac#status()'})
command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()
command! PackStatus packadd minpac | source $MYVIMRC | call minpac#status()

" Define function to setup a plugin
function! s:setup_plugins(plugs) abort
  for l:plug in a:plugs
    let l:name = split(l:plug[0], '/')[1]
    let l:type = get(l:plug[1], 'type', 'start')
    let l:setup_file = glob(
      \ g:my_config_dir . '/rc.d/'
      \ .substitute(l:name, '\.vim', '', 'g')
      \ .'.rc.vim'
      \ )
    if l:setup_file != ''
      exe 'source '.l:setup_file
    endif
    if l:type ==# 'opt'
      exe 'packadd '.l:name
    endif
  endfor
endfunction

" Difine function to lazy load a plugin
function! s:lazy_load_plugins(plugs, ft, augrp) abort
  execute('au! ' . a:augrp)
  call s:setup_plugins(a:plugs)
  execute('doautocmd FileType ' . a:ft)
endfunction

" Setup plugins
" For global plugins
call s:setup_plugins(s:start_plugs_global)

" For FileType plugins
augroup vimrc-lazy-lsp
  au!
  autocmd Filetype go,sh,python,java,json,yaml,vim,markdown,dockerfile
    \ call s:lazy_load_plugins(s:start_plugs_lsp, &filetype, 'vimrc-lazy-lsp') |
    \ call lsp#enable()
augroup END
augroup vimrc-lazy-dev
  au!
  autocmd Filetype sh,go,python 
    \ call s:lazy_load_plugins(s:opt_plugs_dev, &filetype, 'vimrc-lazy-dev')
augroup END
augroup vimrc-lazy-markdown
  au!
  autocmd Filetype markdown 
    \ call s:lazy_load_plugins(s:opt_plugs_markdown, &filetype, 'vimrc-lazy-markdown')
augroup END

" Global command that use opt plugin.
command! -nargs=+ -complete=command Capture packadd vim-quickrun | QuickRun -type vim -src <q-args>

" }}}

" }}}
" ============================================================================
