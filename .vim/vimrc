" ============================================================================
" default {{{
" ============================================================================
unlet! skip_defaults_vim
silent! source $VIMRUNTIME/defaults.vim

" }}}
" ============================================================================
" VIM-PLUG BLOCK {{{
" ============================================================================
call plug#begin('~/.vim/plugged')

" Util
Plug 'itchyny/lightline.vim'
Plug 'liuchengxu/vim-which-key'
Plug 'vim-jp/vimdoc-ja'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesToggle' }
Plug 'junegunn/vim-easy-align', { 'on': '<Plug>(EasyAlign)' }

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive', { 'on': ['Git', 'Gcommit', 'Gstatus', 'Gdiff', 'Gblame', 'Glog'] }

" Fuzzy Finder
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" LSP
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

" ALE
Plug 'w0rp/ale', { 'for': ['go','sh'] }

" Language
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' , 'for' : 'go' }

" syntax
Plug 'cespare/vim-toml', { 'for': 'toml' }

" coloscheme
Plug 'jacoborus/tender.vim'

call plug#end()

" }}}
" ============================================================================
" File types {{{
" ============================================================================
augroup vimrc_filetype
    autocmd!
    autocmd FileType text      setlocal textwidth=0
    autocmd FileType vim       setlocal foldmethod=marker
augroup END

" }}}
" ============================================================================
" mapping {{{
" ============================================================================
" set reader
let mapleader = "\<Space>"

" reload vimrc
nnoremap <Space>s :source $HOME/.vim/vimrc<CR>

" Clear search highlight
nnoremap <Esc><Esc> :nohlsearch<CR><Esc>

" Multi line move
noremap k gk
noremap j gj
noremap gk k
noremap gj j
noremap <Down> gj
noremap <Up> gk

" Move cursor like emacs in Insert Mode
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-a> <C-o>^
inoremap <C-e> <End>
inoremap <C-d> <Del>

" Resize window
noremap <C-w>> 10<C-w>>
noremap <C-w>< 10<C-w><
noremap <C-w>+ 10<C-w>+
noremap <C-w>- 10<C-w>-

" Not yank is delete operation
nnoremap x "_x

" }}}
" ============================================================================
" options {{{
" ============================================================================

" Encoding
set encoding=utf-8
set fileencodings=utf-8
set fileformats=unix,dos,mac

" Don't creat swap files
set nobackup
set noswapfile
set noundofile

" Appearance
set wildmenu
set display=lastline
set laststatus=2
set cursorline
set number
set relativenumber
set wrap
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
set scrolloff=8
set showtabline=2
set synmaxcol=512
set showcmd

" buffer
set hidden
set switchbuf=useopen

" edit
set smarttab
set expandtab
set autoindent
set shiftwidth=4
set shiftround
set tabstop=4
set virtualedit=block
set virtualedit=onemore
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start

" window
set splitbelow
set splitright
set winwidth=30
set winheight=1
set cmdwinheight=5
set noequalalways

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

" clipborad
set clipboard=unnamed

" Completion
set completeopt=menu,menuone,noinsert,noselect

" help
set helplang=ja,en

" vimfinfo
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo

" }}}
" ============================================================================
" Plugin setting {{{
" ============================================================================

" Util {{{
" lightline 
let g:lightline = {
    \ 'colorscheme': 'tender',
    \ }

" nerdtree 
let NERDTreeShowHidden=1
nmap <Leader>t :NERDTreeToggle<CR>

" vim-which-key
set timeoutlen=750
nnoremap <silent> <Leader>      :WhichKey '<Leader>'<CR>

" indentLine
let g:loaded_indentLine = 1
nnoremap <Space>i <C-u>:IndentLinesToggle<CR>

" vim-easy-align
vmap <Enter> <Plug>(EasyAlign)

" }}}

" Git {{{

" vim-gitgutter
let g:gitgutter_map_keys = 0
map [g <Plug>GitGutterPrevHunk
nmap ]g <Plug>GitGutterNextHunk

" fugitive
nmap [fugitive] <Nop>
map <Leader>g [fugitive]
nnoremap <silent> [fugitive]c :<C-u>Gcommit<CR>
nnoremap <silent> [fugitive]d :<C-u>Gdiff<CR>
nnoremap <silent> [fugitive]b :<C-u>Gblame<CR>
nnoremap <silent> [fugitive]l :<C-u>Glog<CR>

" }}}

" fzf {{{
" mapping
nnoremap <silent> <Leader>f :<C-u>Files<CR>
nnoremap <silent> <Leader>G :<C-u>GFiles?<CR>
nnoremap <silent> <Leader>b :<C-u>Buffers<CR>
nnoremap <silent> <Leader>rg :<C-u>Rg<CR>

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
" Rg
command! -bang -nargs=* Rg
\ call fzf#vim#grep(
\ 'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
\ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
\ : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', 'p'),
\ <bang>0)

" }}}

" LSP {{{
let g:lsp_async_completion = 1
"let g:lsp_log_verbose = 1
"let g:lsp_log_file = expand('~/vim-lsp.log')

if executable('pyls')
    augroup LspPython
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
    autocmd Filetype python setlocal omnifunc=lsp#complete
    autocmd FileType python nmap gd <plug>(lsp-definition)
endif

if executable('gopls')
    augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
    autocmd FileType go nmap gd <plug>(lsp-definition)
    augroup END
endif

" }}}

" ALE {{{

" Linter
let g:ale_linters = {
    \ 'go': ['gometalinter'],
    \ 'shell': ['shfmt'],
    \ }

" Sign
let g:ale_sign_column_always = 1
let g:ale_sign_error = '!!'
let g:ale_sign_warning = '=='

" Disable highlight
let g:ale_set_highlights = 0

" Format for echo messages
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" Disable event of linter
let g:ale_lint_on_enter = 1
let g:ale_lint_on_text_changed = 'never'

" Use the quickfix list instead of the loclist
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

" }}}

" vim-go {{{

let g:go_def_mapping_enabled = 0
let g:go_metalinter_autosave = 1
let g:go_fmt_command = "goimports"

let g:go_list_type = "locationlist"
let g:go_list_type_commands = {"GoInstall": "quickfix", "GoBuild": "quickfix", "GoTest": "quickfix"}
let g:go_list_autoclose = 1
let g:go_list_height = 10

let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1

" }}}

" }}}
" ============================================================================
" color {{{
" ============================================================================
filetype plugin indent on
syntax on
set background=dark
colorscheme tender

if exists('&termguicolors')
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
"}}}
" ============================================================================

