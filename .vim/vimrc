let s:vimhome = expand('<sfile>:p:h')

" ============================================================================
" Global variables
" ============================================================================
if has('vim_starting')
  " Use vertical bar cursor in Insert mode
  let &t_SI .= "\e[6 q"
  " Use Block cursor in Normal mode
  let &t_EI .= "\e[2 q"
  " Use Underline cursor in Replace mode
  let &t_SR .= "\e[4 q"

  if exists('$TMUX')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif

" Disable default plugin
let g:loaded_gzip               = 1
let g:loaded_tar                = 1
let g:loaded_tarPlugin          = 1
let g:loaded_zip                = 1
let g:loaded_zipPlugin          = 1
let g:loaded_rrhelper           = 1
let g:loaded_vimball            = 1
let g:loaded_vimballPlugin      = 1
let g:loaded_getscript          = 1
let g:loaded_getscriptPlugin    = 1
let g:loaded_netrw              = 1
let g:loaded_netrwPlugin        = 1
let g:loaded_netrwSettings      = 1
let g:loaded_netrwFileHandlers  = 1
let g:did_install_default_menus = 1
let g:skip_loading_mswin        = 1
let g:did_install_syntax_menu   = 1
let g:loaded_2html_plugin       = 1

" map leader
let g:mapleader = "\<Space>"
let g:maplocalleader = ','

" indent for Line continuation.(\)
let g:vim_indent_cont = 0

" markdown syntax
let g:markdown_fenced_languages = [
\  'go',
\  'sh',
\  'json',
\  'yaml',
\  'lua',
\]

" ============================================================================
" Global options
" ============================================================================
" encoding
set encoding=utf-8
scriptencoding utf-8
set fileencodings=utf-8,cp932
set fileformats=unix,dos,mac

" Appearance
set display=lastline
set laststatus=2
set nocursorcolumn
set nocursorline
set nowrap
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
set scrolloff=8
set synmaxcol=256
set showcmd
set signcolumn=yes
set noshowmode
set showtabline=2
set background=dark
set termguicolors
set diffopt^=vertical
set shortmess+=c
set shortmess-=S
set helplang=ja,en

" edit
set smarttab
set expandtab
set autoindent
set shiftwidth=2
set shiftround
set tabstop=2
set virtualedit=block,onemore
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start

" buffer
set hidden
set switchbuf=useopen

" window
set splitbelow
set splitright
set winwidth=30
set winheight=1
set cmdwinheight=5
set noequalalways

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

" performance
set updatetime=300
set ttimeoutlen=10
set ttyfast
set lazyredraw

" Completion
set completeopt=menuone,noinsert,noselect
set pumheight=10

" cmdline
set wildmenu 
set wildmode=list:full
set wildchar=<Tab>

" data files
set nobackup
set noswapfile
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set undodir=$XDG_CACHE_HOME/vim/.undodir
set undofile

" clipborad
if has('clipboard')
  set clipboard=unnamed
endif

" grep
if executable('rg')
  let &grepprg = 'rg --vimgrep --hidden'
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" ============================================================================
" Mapping
" ============================================================================
" reload vimrc
nnoremap <Leader>s <cmd>source $MYVIMRC<CR>

" Clear search highlight
nnoremap <Esc><Esc> <cmd>nohlsearch<CR><Esc>
nnoremap <C-l>      <cmd>nohlsearch<CR><C-l>

" Multi line move
noremap k gk
noremap j gj
noremap gk k
noremap gj j

" Move cursor like emacs in Insert Mode
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-a> <C-o>^
inoremap <C-e> <End>
inoremap <C-d> <Del>
imap     <C-h> <BS>

" Move cursor like emacs in Cmdline-mode
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <HOME>
cnoremap <C-e> <END>

" forward match from cmdline history
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Move cursor the begining and end of line
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $

" Move between windows
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W

" resize window
nnoremap <Left>  5<C-w><
nnoremap <Right> 5<C-w>>
nnoremap <Up>    2<C-w>-
nnoremap <Down>  2<C-w>+

" Quit the current window
nnoremap <C-q> <cmd>q<CR>
inoremap <C-q> <cmd>q<CR><Esc>
tnoremap <C-q> <cmd>q!<CR>

" Not yank is delete operation
nnoremap x "_x
xnoremap x "_x
nnoremap X "_X
xnoremap X "_X

" Yank EOF
nnoremap Y y$

" Does not move when using *
nnoremap * *N

" Indent in visual and select mode automatically re-selects.
vnoremap > >gv
vnoremap < <gv

" Disable dangerous key
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>

" Toggle options
nmap [Toggle] <Nop>
map <Leader>o [Toggle]
nnoremap [Toggle]n  <cmd>setlocal number! number?<CR>
nnoremap [Toggle]rn <cmd>setlocal relativenumber! relativenumber?<CR>
nnoremap [Toggle]c  <cmd>setlocal cursorline! cursorcolumn!<CR>
nnoremap [Toggle]w  <cmd>setlocal wrap! wrap?<CR>
nnoremap [Toggle]p  <cmd>set paste! paste?<CR>

" terminal mode
tnoremap <C-y> <C-w>N

" open termianl in vertial split,new tab,current winddow
nnoremap <Leader>ts <cmd>terminal<CR>
nnoremap <Leader>tv <cmd>vertical terminal<CR>
nnoremap <Leader>tt <cmd>tab terminal<CR>
nnoremap <Leader>tw <cmd>terminal ++curwin<CR>

" toggle terminal buffer.
function s:ToggleTerminal()
  let l:bufferNum = bufnr('ToggleTerminal')
  if l:bufferNum == -1 || bufloaded(l:bufferNum) != 1
    silent! execute 'bel terminal ++close ++kill=kill'
    file ToggleTerminal
  else
    let l:windowNum = bufwinnr(l:bufferNum)
    if l:windowNum == -1
      silent! execute 'bel sbuffer '.l:bufferNum
    else
      silent! execute l:windowNum.'wincmd w'
      hide
    endif
  endif
endfunction
nnoremap <C-t> <cmd>call <SID>ToggleTerminal()<CR>
tnoremap <C-t> <cmd>call <SID>ToggleTerminal()<CR>

" quickfix/loclist
nnoremap [q <cmd>cprev<CR>
nnoremap ]q <cmd>cnext<CR>
nnoremap [l <cmd>lprevious<CR>
nnoremap ]l <cmd>lnext<CR>
function s:toggleqf() abort
  let l:qid = getqflist({'winid' : 1}).winid
  let l:lid = getloclist(0, {'winid' : 1}).winid
  if l:qid == 0 && l:lid == 0
    silent cwindow
    if &ft != 'qf'
      try
        silent lwindow
      catch /E776/
      endtry
    endif
  elseif l:qid != 0 && l:lid == 0
    silent cclose
    try
      silent lwindow
    catch /E776/
    endtry
  elseif l:qid == 0 && l:lid != 0
    silent lclose
  else
    cclose
    lclose
  endif
endfunction
nnoremap <silent> <script> Q <cmd>call <SID>toggleqf()<CR>

" ============================================================================
" Command
" ============================================================================
" Caputre result for Ex-Command.
command! -nargs=1 -complete=command Capture
\ <mods> new |
\ setlocal buftype=nofile bufhidden=hide noswapfile |
\ call setline(1, split(execute(<q-args>), '\n'))

" ============================================================================
" autocmd
" ============================================================================
function s:cfiler() abort
  let l:query = input('Cfilter: ', '')
  if empty(l:query) | redraw | return | endif
  execute 'Cfilter' l:query
endfunction
augroup vimrc_filetype
  autocmd!
  autocmd FileType gitcommit setlocal spell spelllang=cjk,en
  autocmd FileType git setlocal nofoldenable
  autocmd FileType text setlocal textwidth=0
  autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd FileType qf setlocal signcolumn=no
  autocmd Filetype qf ++once packadd cfilter
  autocmd Filetype qf nnoremap <silent> <buffer> q <C-w>c
  autocmd Filetype qf nnoremap <buffer> <LocalLeader>f <cmd>call <SID>cfiler()<CR>
  autocmd BufEnter *.txt,*.jax if &buftype == 'help' | wincmd L | endif
  autocmd FileType help setlocal signcolumn=no
  autocmd FileType help nnoremap <silent> <buffer> q <C-w>c
  autocmd FileType help nnoremap <buffer> <CR> <C-]>
  autocmd FileType help nnoremap <buffer> <BS> <C-T>
  autocmd TerminalOpen * if &buftype == 'terminal' | setlocal signcolumn=no nolist | endif
augroup END

" ============================================================================
" abbrev
" ============================================================================
" Shortening for ++enc=
cnoreabbrev ++u ++enc=utf8
cnoreabbrev ++c ++enc=cp932
cnoreabbrev ++s ++enc=sjis

" ============================================================================
" Plugin
" ============================================================================
function! PackInit() abort
  packadd minpac

  call minpac#init({'progress_open': 'vertical'})
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " global
  call minpac#add('chuling/vim-equinusocio-material', {'type': 'opt'})
  call minpac#add('aonemd/kuroi.vim', {'type': 'opt'})
  call minpac#add('jacoborus/tender.vim', {'type': 'opt'})
  call minpac#add('itchyny/lightline.vim')
  call minpac#add('itchyny/vim-gitbranch')
  call minpac#add('halkn/lightline-lsp')
  call minpac#add('mhinz/vim-signify')
  call minpac#add('vim-jp/vimdoc-ja')
  call minpac#add('hrsh7th/vim-eft')
  call minpac#add('tyru/columnskip.vim')
  call minpac#add('tyru/caw.vim')
  call minpac#add('machakann/vim-sandwich')
  call minpac#add('machakann/vim-swap')
  call minpac#add('machakann/vim-highlightedyank')
  call minpac#add('kana/vim-operator-user')
  call minpac#add('kana/vim-operator-replace')
  call minpac#add('mattn/vim-lexiv')
  call minpac#add('mattn/vim-findroot')
  " fuzzyfubder
  call minpac#add('ctrlpvim/ctrlp.vim')
  call minpac#add('mattn/ctrlp-matchfuzzy')
  call minpac#add('mattn/ctrlp-launcher')
  " LSP
  call minpac#add('prabirshrestha/vim-lsp')
  call minpac#add('mattn/vim-lsp-settings')
  call minpac#add('prabirshrestha/asyncomplete.vim')
  call minpac#add('prabirshrestha/asyncomplete-lsp.vim')
  call minpac#add('hrsh7th/vim-vsnip')
  call minpac#add('hrsh7th/vim-vsnip-integ')
  " FileType
  call minpac#add('kana/vim-altr')
  call minpac#add('mattn/vim-gomod')
  call minpac#add('mattn/vim-goaddtags')
  call minpac#add('mattn/vim-goimpl')
  call minpac#add('kyoh86/vim-go-coverage')
  call minpac#add('plasticboy/vim-markdown')
  call minpac#add('godlygeek/tabular')
  call minpac#add('mattn/vim-maketable')
  call minpac#add('previm/previm')
  call minpac#add('lambdalisue/vim-backslash')
  call minpac#add('halkn/vim-qfex')
  " Extension
  call minpac#add('halkn/vim-agrep')
  call minpac#add('halkn/vim-termrun')
  call minpac#add('glidenote/memolist.vim')
  call minpac#add('lambdalisue/gina.vim', { 'type': 'opt' })
  call minpac#add('skanehira/translate.vim')
  call minpac#add('thinca/vim-qfreplace')
  call minpac#add('t9md/vim-quickhl')
  call minpac#add('tweekmonster/startuptime.vim')
endfunction

set packpath^=$XDG_DATA_HOME/vim
command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean  source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()

filetype plugin indent on
syntax enable

if !isdirectory(expand('$XDG_DATA_HOME/vim/pack/minpac'))
  colorscheme desert
  finish
endif

" ============================================================================
" Plugin config
" ============================================================================
" Global ---------------------------------------------------------------------
" vim-equinusocio-material
" packadd vim-equinusocio-material
" let g:equinusocio_material_style = 'darker'
" let g:equinusocio_material_bracket_improved = 1
" augroup vimrc_colorscheme
"   autocmd!
"   autocmd ColorScheme equinusocio_material highlight LspErrorHighlight gui=underline cterm=underline
"   autocmd ColorScheme equinusocio_material highlight LspWarningHighlight gui=underline cterm=underline
" augroup END
" colorscheme equinusocio_material
" function s:kuroi_modify() abort
"   highlight link LspErrorText WarningMsg
"   highlight link LspWarningText Title
"   highlight link LspWarningHighlight LongLineWarning
" endfunction
" augroup vimrc_colorscheme
"   autocmd!
"   autocmd ColorScheme kuroi call s:kuroi_modify()
" augroup END
" colorscheme kuroi

" tender.vim
function s:tender_custum() abort
  hi PMenu guifg=#eeeeee ctermfg=255 guibg=#444444 ctermbg=238 gui=NONE cterm=NONE
  hi PMenuSel guifg=#ffc24b ctermfg=215 guibg=#282828 ctermbg=235 gui=NONE cterm=NONE
  hi link LspErrorText CocErrorSign
  hi link LspWarningText CocWarningSign
  hi link LspCodeActionText CocWarningSign
  hi LspErrorHighlight gui=underline cterm=underline
  hi LspWarningHighlight gui=underline cterm=underline
  let g:terminal_ansi_colors = [
  \ '#282828',
  \ '#f43753',
  \ '#c9d05c',
  \ '#ffc24b',
  \ '#b3deef',
  \ '#d3b987',
  \ '#73cef4',
  \ '#eeeeee',
  \ '#1d1d1d',
  \ '#f43753',
  \ '#c9d05c',
  \ '#ffc24b',
  \ '#b3deef',
  \ '#d3b987',
  \ '#73cef4',
  \ '#ffffff'
  \ ]
endfunction
augroup vimrc_colorscheme
  autocmd!
  autocmd ColorScheme tender call s:tender_custum()
augroup END
colorscheme tender

" lightline
let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'tabline': {
\   'left':  [ ['tabs'] ],
\   'right': [ ['close'], ['cwd'] ],
\ },
\ 'active': {
\   'left': [ [ 'mode', 'paste'],
\             [ 'gitbranch' ],
\             [ 'readonly', 'filename', 'modified' ], ['gitstatus'] ],
\   'right': [ ['lsp_errors', 'lsp_warnings', 'lsp_ok'],
\              [ 'lineinfo' ],
\              [ 'percent' ],
\              [ 'fileformat', 'fileencoding', 'filetype' ],
\              ],
\ },
\ 'component_function': {
\   'gitbranch': 'gitbranch#name',
\   'gitstatus': 'sy#repo#get_stats_decorated',
\   'cwd':       'getcwd',
\ },
\ 'component_expand': {
\   'lsp_warnings': 'lightline_lsp#warnings',
\   'lsp_errors':   'lightline_lsp#errors',
\   'lsp_ok':       'lightline_lsp#ok',
\ },
\ 'component_type': {
\   'lsp_warnings': 'warning',
\   'lsp_errors':   'error',
\   'lsp_ok':       'ok',
\ },
\ }

" vim-signify
let g:signify_disable_by_default = 0
let g:signify_priority = 5
nnoremap <C-y>      <cmd>SignifyToggle<CR>
nnoremap <leader>gu <cmd>SignifyHunkUndo<cr>

" vim-eft
nmap ; <Plug>(eft-repeat)
xmap ; <Plug>(eft-repeat)
nmap f <Plug>(eft-f)
xmap f <Plug>(eft-f)
omap f <Plug>(eft-f)
nmap F <Plug>(eft-F)
xmap F <Plug>(eft-F)
omap F <Plug>(eft-F)
nmap t <Plug>(eft-t)
xmap t <Plug>(eft-t)
omap t <Plug>(eft-t)
nmap T <Plug>(eft-T)
xmap T <Plug>(eft-T)
omap T <Plug>(eft-T)

" columnskip.vim
nmap sj <Plug>(columnskip:nonblank:next)
omap sj <Plug>(columnskip:nonblank:next)
xmap sj <Plug>(columnskip:nonblank:next)
nmap sk <Plug>(columnskip:nonblank:prev)
omap sk <Plug>(columnskip:nonblank:prev)
xmap sk <Plug>(columnskip:nonblank:prev)

" caw.vim
let g:caw_no_default_keymappings = 1
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)

" vim-swap
omap i, <Plug>(swap-textobject-i)
xmap i, <Plug>(swap-textobject-i)
omap a, <Plug>(swap-textobject-a)
xmap a, <Plug>(swap-textobject-a)

" vim-highlightedyank
let g:highlightedyank_highlight_duration = 100

" vim-operator-replace
map R <Plug>(operator-replace)

" FuzzyFinder ----------------------------------------------------------------
" ctrlp.vim
let g:ctrlp_map = '<space>f'
let g:ctrlp_user_command = 'fd --type file --follow --hidden -E .git -E .svn'
let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_match_window = 'bottom,order:btt,min:12,max:12,results:12'
let g:ctrlp_reuse_window = 'help\|quickfix'
let g:ctrlp_use_caching = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}

nnoremap <Leader><Leader> <cmd>CtrlPMRU<CR>
nnoremap <Leader>b        <cmd>CtrlPBuffer<CR>
nnoremap <Leader>l        <cmd>CtrlPLine<CR>

" ctrlp-launcher
let g:ctrlp_launcher_file = s:vimhome .. '/etc/ctrlp/ctrlp-launcher'
nnoremap <Leader>0 <cmd>CtrlPLauncher<CR>
augroup vimrc_ctrlp_launcher
  autocmd!
  autocmd BufEnter *ctrlp-launcher* setlocal noexpandtab
augroup END

" LSP ------------------------------------------------------------------------
" vim-lsp-settings
let g:lsp_settings = {
\ 'gopls': {
\   'initialization_options': {
\     'gofumpt': v:true,
\     'usePlaceholders': v:true,
\     'staticcheck': v:true,
\     'codelenses': {
\       'generate': v:true,
\       'test': v:true,
\     }
\   }
\ },
\ 'yaml-language-server': {
\   'initialization_options': {
\     'yaml': {
\       'schemas': {
\         'http://json.schemastore.org/cloudbuild': '/cloudbuild*.yaml'
\       },
\       'format': {
\         'enable': v:true,
\         'singleQuote': v:true,
\       }
\     }
\   }
\ },
\ 'efm-langserver': {
\   'disabled': 0,
\   'allowlist': ['markdown', 'json', 'sh']
\ }
\}

" vim-lsp
let g:lsp_async_completion = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_float_cursor = 0
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_documentation_float_docked = 1
let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_signs_insert_mode_enabled = 0
let g:lsp_diagnostics_signs_priority = 12
let g:lsp_diagnostics_signs_error = {'text': "\u2717"}
let g:lsp_diagnostics_signs_warning = {'text': "\u26a0"}
let g:lsp_diagnostics_signs_information = {'text': "i>"}
let g:lsp_diagnostics_signs_hint = {'text': "H>"}
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_document_code_action_signs_priority = 11
let g:lsp_document_code_action_signs_hint = {'text': "\uf834"}

function! s:setup_lsp() abort
  setlocal omnifunc=lsp#complete
  setlocal tagfunc=lsp#tagfunc
  nmap <silent> <buffer> gd              <Plug>(lsp-definition)
  nmap <silent> <buffer> gi              <Plug>(lsp-implementation)
  nmap <silent> <buffer> gy              <Plug>(lsp-type-definition)
  nmap <silent> <buffer> gr              <Plug>(lsp-references)
  nmap <silent> <buffer> K               <Plug>(lsp-hover)
  nmap <silent> <buffer> <F2>            <Plug>(lsp-rename)
  nmap <silent> <buffer> <LocalLeader>k  <Plug>(lsp-peek-definition)
  nmap <silent> <buffer> <LocalLeader>ca <Plug>(lsp-code-action)
  nmap <silent> <buffer> <LocalLeader>cl <Plug>(lsp-code-lens)
  nmap <silent> <buffer> <LocalLeader>d  <cmd>LspDocumentDiagnostics --buffers=*<CR>
  nmap <silent> <buffer> ]d              <Plug>(lsp-next-diagnostic-nowrap)
  nmap <silent> <buffer> [d              <Plug>(lsp-previous-diagnostic-nowrap)
  nmap <silent> <buffer> <LocalLeader>m  <Plug>(lsp-document-format)
  nmap <silent> <buffer> <LocalLeader>s  <Plug>(lsp-document-symbol-search)
  nmap <silent> <buffer> <LocalLeader>w  <Plug>(lsp-workspace-symbol-search)
  if &filetype ==# 'typescript'
    nmap <silent> <buffer> gd            <plug>(lsp-deno-definition)
  endif
endfunction

augroup vimrc_lsp_setup
  au!
  autocmd User lsp_buffer_enabled call s:setup_lsp()
  autocmd BufWritePre *.go call execute([
  \ 'LspCodeActionSync source.organizeImports',
  \ 'LspDocumentFormatSync'])
  autocmd BufWritePre *.ts,*sh silent execute('LspDocumentFormatSync') 
augroup END

" asyncomplete.vim
inoremap <expr> <CR>  pumvisible() ? asyncomplete#close_popup()  : "\<CR>"
inoremap <expr> <C-y> pumvisible() ? asyncomplete#close_popup()  : "\<C-y>"
inoremap <expr> <C-e> pumvisible() ? asyncomplete#cancel_popup() : "\<C-e>"

" vim-vsnip
let g:vsnip_snippet_dir = s:vimhome .. '/etc/snippets'
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'

" Make <tab> used for
" trigger completion, completion confirm, snippet expand and jump like VSCode.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
imap <silent><expr> <TAB>
\ pumvisible() ? asyncomplete#close_popup() :
\ vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : 
\ <SID>check_back_space() ? "\<TAB>" :
\ asyncomplete#force_refresh()

" ----------------------------------------------------------------------------
" FileType
" ----------------------------------------------------------------------------
" vim-altr
augroup vimrc_altr
  au!
  autocmd FileType go,vim,help nmap <buffer> <LocalLeader>a <Plug>(altr-forward)
  autocmd FileType go,vim,help nmap <buffer> <LocalLeader>b <Plug>(altr-back)
augroup END

" vim-markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_emphasis_multiline = 0
augroup vimrc_markdown
  au!
  autocmd FileType markdown nnoremap <buffer> <LocalLeader>o <cmd>Toch<CR>
  autocmd FileType markdown nnoremap <buffer> <LocalLeader>f <cmd>TableFormat<CR>
augroup END

" vim-maketable
augroup vimrc_maketable
  au!
  autocmd FileType markdown vnoremap <silent> <buffer> mt :MakeTable!<CR>
  autocmd FileType markdown nnoremap <buffer>          mt <cmd>UnmakeTable!<CR>
augroup END

" previm
let g:previm_open_cmd = 'open'
augroup vimrc_previm
  au!
  autocmd FileType markdown nnoremap <buffer> <LocalLeader>p <cmd>PrevimOpen<CR>
augroup END

" vim-qfex
let g:qfex_autopreview_enabled = 1
let g:qfex_autoclose_enabled = 1

" ----------------------------------------------------------------------------
" Extention
" ----------------------------------------------------------------------------
" vim-agrep
nmap <Leader>a <Plug>(agrep-input)

" vim-termrun
let g:termrun_config = {
\ '_': { 'opts': {'term_rows': &lines/3} },
\ 'sh': { 'opts': {'vertical': v:true, 'term_cols': &columns/2} },
\ 'go': { 'opts': {'term_rows': &lines/3} },
\ }
nmap <Leader>q <Plug>(termrun-close)
augroup vimrc_termrun
  au!
  autocmd FileType go,sh,markdown nmap <buffer> <LocalLeader>r <Plug>(termrun-quick)
  autocmd FileType go nmap <buffer> <LocalLeader>t <Plug>(termrun-test)
  autocmd FileType go nmap <buffer> <LocalLeader>f <Plug>(termrun-gotest-func)
augroup END

" memolist.vim
let g:memolist_memo_suffix = 'md'
let g:memolist_template_dir_path = s:vimhome .. '/etc/memotemplates'
let g:memolist_ex_cmd = 'CtrlP'
nnoremap <Leader>mn <cmd>MemoNew<CR>
nnoremap <Leader>mg <cmd>MemoGrep<CR>
nnoremap <Leader>ml <cmd>MemoList<CR>

" gina.vim
function s:gina_settings() abort
  packadd gina.vim
  let l:gina_cmd_opt = {'noremap': 1, 'silent': 1}
  call gina#custom#command#option('status','-s')
  call gina#custom#command#option('status','--opener', 'tabedit')
  call gina#custom#command#option('log','--opener', 'tabedit')
  call gina#custom#command#option('commit', '-v')
  call gina#custom#command#option('show','--show-signature')
  call gina#custom#command#option('branch','--opener', 'split')

  call gina#custom#mapping#nmap(
  \ '/.*', 'q', '<cmd>bd<CR>', l:gina_cmd_opt
  \ )
  call gina#custom#mapping#nmap(
  \ 'status',
  \ '<C-c>',
  \ '<cmd>Gina commit<CR>',
  \ l:gina_cmd_opt)
  call gina#custom#mapping#nmap(
  \ 'commit', 
  \ '<C-c>', 
  \ '<cmd>Gina status --opener=edit<CR>',
  \ l:gina_cmd_opt)
  call gina#custom#mapping#nmap(
  \ 'status',
  \ 'p',
  \ '<cmd>call gina#action#call(''diff:vsplit'')<CR>',
  \ l:gina_cmd_opt,
  \ )
  call gina#custom#mapping#nmap(
  \ '/\%(blame\|log\|reflog\)',
  \ 'p',
  \ '<cmd>call gina#action#call(''show:commit:vsplit'')<CR>',
  \ l:gina_cmd_opt,
  \ )
  call gina#custom#mapping#nmap(
  \ 'branch',
  \ 'D',
  \ '<cmd>call gina#action#call(''branch:delete'')<CR>',
  \ l:gina_cmd_opt
  \  )

  call gina#custom#execute(
  \ '/\%(ls\|log\|reflog\|grep\)',
  \ 'setlocal noautoread',
  \ )
  call gina#custom#execute(
  \ '/\%(status\|branch\|ls\|log\|reflog\|grep\)',
  \ 'setlocal cursorline',
  \ )
endfunction

augroup vimrc_gina
  autocmd!
  autocmd CmdUndefined Gina ++once call s:gina_settings()
augroup END

nnoremap <Leader>gs <cmd>Gina status<CR>
nnoremap <Leader>gl <cmd>Gina log --graph<CR>
nnoremap <Leader>gd <cmd>Gina compare<CR>
nnoremap <Leader>gb <cmd>Gina branch -av<CR>

" translate.vim
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_winsize = 10
xmap T <Plug>(VTranslate)
xmap <Leader>tR <Plug>(VTranslateBang)

" vim-quickhl
nmap mm <Plug>(quickhl-manual-this)
xmap mm <Plug>(quickhl-manual-this)
nmap mM <Plug>(quickhl-manual-reset)
xmap mM <Plug>(quickhl-manual-reset)
