" ============================================================================
" Global variables
" ============================================================================
if has('vim_starting')
  " Use vertical bar cursor in Insert mode
  let &t_SI .= "\e[6 q"
  " Use Block cursor in Normal mode
  let &t_EI .= "\e[2 q"
  " Use Underline cursor in Replace mode
  let &t_SR .= "\e[4 q"

  if exists('$TMUX')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif

" Disable default plugin
let g:loaded_gzip               = 1
let g:loaded_tar                = 1
let g:loaded_tarPlugin          = 1
let g:loaded_zip                = 1
let g:loaded_zipPlugin          = 1
let g:loaded_rrhelper           = 1
let g:loaded_vimball            = 1
let g:loaded_vimballPlugin      = 1
let g:loaded_getscript          = 1
let g:loaded_getscriptPlugin    = 1
let g:loaded_netrw              = 1
let g:loaded_netrwPlugin        = 1
let g:loaded_netrwSettings      = 1
let g:loaded_netrwFileHandlers  = 1
let g:did_install_default_menus = 1
let g:skip_loading_mswin        = 1
let g:did_install_syntax_menu   = 1
let g:loaded_2html_plugin       = 1

" map leader
let g:mapleader = "\<Space>"
let g:maplocalleader = ','

" indent for Line continuation.(\)
let g:vim_indent_cont = 0

" markdown syntax
let g:markdown_fenced_languages = [
\  'go',
\  'sh',
\  'json',
\  'yaml',
\  'java',
\]

" ============================================================================
" Global options
" ============================================================================
set encoding=utf-8
scriptencoding utf-8

" Encoding
set fileencodings=utf-8,cp932
set fileformats=unix,dos,mac

" Don't creat swap files
set nobackup
set noswapfile
set noundofile

" Appearance
set wildmenu
set display=lastline
set laststatus=2
set nocursorcolumn
set nocursorline
set wrap
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
set scrolloff=8
set synmaxcol=256
set showcmd
set signcolumn=yes
set noshowmode
set showtabline=0
set background=dark
set diffopt^=vertical

" buffer
set hidden
set switchbuf=useopen

" edit
set smarttab
set expandtab
set autoindent
set shiftwidth=4
set shiftround
set tabstop=4
set virtualedit=block,onemore
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start

" window
set splitbelow
set splitright
set winwidth=30
set winheight=1
set cmdwinheight=5
set noequalalways

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

" Completion
set completeopt=menuone,noinsert,noselect

" shortmess
set shortmess+=c
set shortmess-=S

" help
set helplang=ja,en

" vimfinfo
if has('viminfo')
  set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
endif

" clipborad
if has('clipboard')
  set clipboard=unnamed
elseif executable('win32yank.exe')
  augroup Yank
    au!
    autocmd TextYankPost * :call system('win32yank.exe -i', @")
  augroup END
  noremap <silent> p :call setreg('"',system('win32yank.exe -o'))<CR>""p
  noremap <silent> P :call setreg('"',system('win32yank.exe -o'))<CR>""P
endif

" undo
if has("persistent_undo")
  set undodir=$XDG_CACHE_HOME/vim/.undodir
  set undofile
endif

" Use true color in terminal
if exists('&termguicolors')
  set termguicolors
endif

" Use popup window with complete
if has('textprop')
  set completeopt+=popup
  set completepopup=align:menu,border:on,highlight:Pmenu
endif

" grep
if executable('rg')
  let &grepprg = 'rg --vimgrep --hidden'
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" ============================================================================
" Plugin
" ============================================================================
function! PackInit() abort
  packadd minpac

  call minpac#init({'progress_open': 'vertical'})
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " global
  call minpac#add('chuling/vim-equinusocio-material', {'type': 'opt'})
  call minpac#add('itchyny/lightline.vim')
  call minpac#add('itchyny/vim-gitbranch')
  call minpac#add('halkn/lightline-lsp')
  call minpac#add('vim-jp/vimdoc-ja')
  call minpac#add('tyru/columnskip.vim')
  call minpac#add('cohama/lexima.vim')
  call minpac#add('tyru/caw.vim')
  call minpac#add('machakann/vim-sandwich')
  call minpac#add('kana/vim-operator-user')
  call minpac#add('kana/vim-operator-replace')
  call minpac#add('ctrlpvim/ctrlp.vim')
  " LSP
  call minpac#add('prabirshrestha/vim-lsp')
  call minpac#add('mattn/vim-lsp-settings')
  call minpac#add('prabirshrestha/asyncomplete.vim')
  call minpac#add('prabirshrestha/asyncomplete-lsp.vim')
  call minpac#add('hrsh7th/vim-vsnip')
  call minpac#add('hrsh7th/vim-vsnip-integ')
  call minpac#add('liuchengxu/vista.vim')
  " Develop
  call minpac#add('mattn/vim-findroot')
  call minpac#add('skywind3000/asyncrun.vim')
  call minpac#add('kana/vim-altr')
  " FileType
  call minpac#add('dhruvasagar/vim-table-mode')
  call minpac#add('previm/previm')
  call minpac#add('tyru/open-browser.vim')
  call minpac#add('skanehira/preview-markdown.vim')
  " Extension
  call minpac#add('glidenote/memolist.vim')
  call minpac#add('simeji/winresizer')
  call minpac#add('mhinz/vim-signify')
  call minpac#add('lambdalisue/gina.vim', { 'type': 'opt' })
  call minpac#add('voldikss/vim-floaterm')
  call minpac#add('bfrg/vim-qf-preview')
  call minpac#add('tyru/capture.vim')
  call minpac#add('skanehira/translate.vim')
  call minpac#add('thinca/vim-qfreplace')
  call minpac#add('t9md/vim-quickhl')
  call minpac#add('tweekmonster/startuptime.vim')
endfunction

set packpath^=$XDG_DATA_HOME/vim
command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean  source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()

filetype plugin indent on
syntax enable

" ============================================================================
" Mapping
" ============================================================================
" reload vimrc
nnoremap <Space>s :source $MYVIMRC<CR>

" Clear search highlight
nnoremap <Esc><Esc> :nohlsearch<CR><Esc>

" Multi line move
noremap k gk
noremap j gj
noremap gk k
noremap gj j
noremap <Down> gj
noremap <Up> gk

" Move cursor like emacs in Insert Mode
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-a> <C-o>^
inoremap <C-e> <End>
inoremap <C-d> <Del>

" Move cursor like emacs in Insert Mode
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <HOME>
cnoremap <C-e> <END>

" Move cursor the begining and end of line
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $

" Move between windows
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W

" Not yank is delete operation
nnoremap x "_x
nnoremap X "_X

" Disable s operation
nnoremap s <Nop>
vnoremap s <Nop>

" Indent in visual and select mode automatically re-selects.
vnoremap > >gv
vnoremap < <gv

" Quit the current window
nnoremap <silent> <C-q> :q<CR>
inoremap <silent> <C-q> <Esc>:q<CR>
tnoremap <silent> <C-q> <C-w>N:q!<CR>

" open termianl in vertial split,new tab,current winddow
nnoremap <silent> <Leader>ts :<C-u>terminal<CR>
nnoremap <silent> <Leader>tv :<C-u>vertical terminal<CR>
nnoremap <silent> <Leader>tt :<C-u>tab terminal<CR>
nnoremap <silent> <Leader>tw :<C-u>terminal ++curwin<CR>

" Toggle options
nmap [Toggle] <Nop>
map <Leader>o [Toggle]
nnoremap <silent> [Toggle]n :<C-u>setlocal number! number?<CR>
nnoremap <silent> [Toggle]rn :<C-u>setlocal relativenumber! relativenumber?<CR>
nnoremap <silent> [Toggle]c :<C-u>setlocal cursorline! cursorcolumn!<CR>
nnoremap <silent> [Toggle]w :<C-u>setlocal wrap! wrap?<CR>
nnoremap <silent> [Toggle]p :<C-u>set paste! paste?<CR>

" Shortening for ++enc=
cnoreabbrev ++u ++enc=utf8
cnoreabbrev ++c ++enc=cp932
cnoreabbrev ++s ++enc=sjis

" quickfix
nnoremap <silent> [q :<C-u>cprev<CR>
nnoremap <silent> ]q :<C-u>cnext<CR>

function! ToggleQuickfix()
  let l:nr = winnr('$')
  cwindow
  let l:nr2 = winnr('$')
  if l:nr == l:nr2
      cclose
  endif
endfunction
nnoremap <script> <silent> Q :call ToggleQuickfix()<CR>

" locationlist
nnoremap <silent> [l :lprevious<CR>
nnoremap <silent> ]l :lnext<CR>

function! ToggleLocationList()
  let l:nr = winnr('$')
  lwindow
  let l:nr2 = winnr('$')
  if l:nr == l:nr2
      lclose
  endif
endfunction
nnoremap <script> <silent> W :call ToggleLocationList()<CR>

" ============================================================================
" autocmd
" ============================================================================
" indent by FileType
augroup vimrc-ft-indent
  autocmd!
  autocmd FileType gitcommit setlocal spell spelllang=cjk,en
  autocmd FileType git setlocal nofoldenable
  autocmd FileType text setlocal textwidth=0
  autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd FileType vim setlocal tabstop=2 shiftwidth=2
  autocmd FileType lua setlocal tabstop=2 shiftwidth=2
  autocmd FileType sh setlocal tabstop=2 shiftwidth=2
  autocmd FileType zsh setlocal tabstop=2 shiftwidth=2
  autocmd FileType yaml setlocal tabstop=2 shiftwidth=2
  autocmd FileType json setlocal tabstop=2 shiftwidth=2
augroup END

" quickfix
augroup vimrc-ft-quickfix
  autocmd!
  autocmd FileType qf setlocal signcolumn=no
  autocmd Filetype qf nnoremap <silent> <buffer> p <CR>zz<C-w>p
  autocmd Filetype qf nnoremap <silent> <buffer> q <C-w>c
augroup END

" vim help
augroup vimrc-ft-help
  autocmd!
  autocmd FileType help wincmd L
  autocmd FileType help setlocal signcolumn=no
  autocmd FileType help nnoremap <silent> <buffer> q <C-w>c
  autocmd FileType help nnoremap <buffer> <CR> <C-]>
  autocmd FileType help nnoremap <buffer> <BS> <C-T>
augroup END

" terminal
augroup vimrc_terminal_setting
  autocmd!
  autocmd TerminalOpen * if &buftype == 'terminal' | setlocal signcolumn=no | endif
augroup END

" ============================================================================
" Plugin config
" ============================================================================
" Global ---------------------------------------------------------------------
" vim-equinusocio-material
packadd vim-equinusocio-material
let g:equinusocio_material_style = 'darker'
let g:equinusocio_material_bracket_improved = 1
colorscheme equinusocio_material

highlight LspErrorHighlight gui=underline cterm=underline
highlight LspWarningHighlight gui=underline cterm=underline
hi PMenu guibg=#2f2f2f

" lightline
let g:lightline = {
\ 'colorscheme': 'equinusocio_material',
\ 'active': {
\   'left': [ [ 'mode', 'paste'],
\             [ 'readonly', 'filename', 'modified' ], ['gitbranch'] ],
\   'right': [ [ 'lsp_errors', 'lsp_warnings', 'lsp_ok', 'lineinfo' ],
\              [ 'percent' ],
\              [ 'fileformat', 'fileencoding', 'filetype' ] ]
\ },
\ 'component_function': {
\   'gitbranch': 'gitbranch#name'
\ },
\ 'component_expand': {
\   'lsp_warnings': 'lightline_lsp#warnings',
\   'lsp_errors':   'lightline_lsp#errors',
\   'lsp_ok':       'lightline_lsp#ok',
\ },
\ 'component_type': {
\   'lsp_warnings': 'warning',
\   'lsp_errors':   'error',
\   'lsp_ok':       'middle',
\ },
\ }

" lexima.vim
let g:lexima_ctrlh_as_backspace = 1

" caw.vim
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)

" vim-operator-replace
map R <Plug>(operator-replace)

" columnskip.vim
nmap sj <Plug>(columnskip:nonblank:next)
omap sj <Plug>(columnskip:nonblank:next)
xmap sj <Plug>(columnskip:nonblank:next)
nmap sk <Plug>(columnskip:nonblank:prev)
omap sk <Plug>(columnskip:nonblank:prev)
xmap sk <Plug>(columnskip:nonblank:prev)

" ctrlp.vim
let g:ctrlp_map = '<space>f'
let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_match_window = 'bottom,order:btt,min:12,max:12,results:12'
let g:ctrlp_reuse_window = 'help\|quickfix'
let g:ctrlp_use_caching = 0
let g:ctrlp_user_command = 'fd --type file --follow --hidden -E .git -E .svn'

nnoremap <silent> <Leader><Leader> :<C-u>CtrlPMRU<CR>
nnoremap <silent> <Leader>b        :<C-u>CtrlPBuffer<CR>
nnoremap <silent> <Leader>l        :<C-u>CtrlPLine<CR>

" LSP ------------------------------------------------------------------------
" vim-lsp-settings
let g:lsp_settings = {
\ 'gopls': {
\   'workspace_config': { 'gopls':
\     {
\       'hoverKind': 'FullDocumentation',
\       'completeUnimported': v:true,
\       'usePlaceholders': v:true,
\       'staticcheck': v:true,
\       'analyses': {
\         'fillstruct': v:true,
\       },
\     }
\   }
\ },
\ 'yaml-language-server': {
\   'workspace_config': {
\     'yaml': {
\       'schemas': {
\         'http://json.schemastore.org/cloudbuild': '/cloudbuild*.yaml'
\       },
\       'format': {
\         'enable': v:true,
\         'singleQuote': v:true,
\       }
\     }
\   }
\ },
\ 'efm-langserver': {
\   'disabled': 0,
\   'allowlist': ['markdown', 'json', 'sh']
\ }
\}

" vim-lsp
let g:lsp_async_completion = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_float_cursor = 0
let g:lsp_signs_enabled = 1
let g:lsp_signs_priority = 11
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '!!'}
let g:lsp_signs_information = {'text': '●'}
let g:lsp_signs_hint = {'text': '▲'}

function! s:setup_lsp() abort
  setlocal omnifunc=lsp#complete
  setlocal tagfunc=lsp#tagfunc
  nmap <silent> <buffer> gd <Plug>(lsp-definition)
  nmap <silent> <buffer> gD :<C-u>tab LspDefinition<CR>
  nmap <silent> <buffer> gy <Plug>(lsp-type-definition)
  nmap <silent> <buffer> gr <Plug>(lsp-references)
  nmap <silent> <buffer> K <Plug>(lsp-hover)
  nmap <silent> <buffer> <LocalLeader>k <Plug>(lsp-peek-definition)
  nmap <silent> <buffer> <F2> <Plug>(lsp-rename)
  nmap <silent> <buffer> <LocalLeader>d <plug>(lsp-document-diagnostics)
endfunction

augroup vimrc-lsp-setup
  au!
  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  autocmd User lsp_buffer_enabled call s:setup_lsp()
  autocmd BufWritePre *.go  call execute('LspDocumentFormatSync') |
    \ call execute('LspCodeActionSync source.organizeImports')
  autocmd BufWrite *.json call execute('LspDocumentFormatSync')
  autocmd BufWrite *.sh call execute('LspDocumentFormatSync')
augroup END

" asyncomplete.vim
let g:asyncomplete_auto_completeopt = 0
inoremap <expr> <C-y> pumvisible() ? asyncomplete#close_popup() : "\<C-y>"

" vim-vsnip
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
imap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'
smap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
let g:vsnip_snippet_dir = expand(fnamemodify($MYVIMRC, ":h") . '/snippets')

" vista.vim
let g:vista_default_executive = 'vim_lsp'
let g:vista_executive_for = {
\ 'markdown': 'toc',
\ }
let g:vista_close_on_jump = 1
let g:vista#renderer#enable_icon = 0
let g:vista_fzf_preview = ['right:60%']
let g:vista_echo_cursor_strategy = 'floating_win'
nnoremap <silent> <leader>vt :<c-u>Vista!!<CR>
nnoremap <silent> <leader>vf :<c-u>Vista finder<CR>

" Develop --------------------------------------------------------------------
" asyncrun.vim
let g:asyncrun_open = 8
command! -nargs=* Grep AsyncRun -program=grep -strip <f-args>

function s:asyncrun_gotest_func() abort
  let l:test = search('func \(Test\|Example\)', "bcnW")

  if l:test == 0
    echo "[test] no test found immediate to cursor"
    return
  end

  let l:line = getline(test)
  let l:name = split(split(line, " ")[1], "(")[0]
  execute('AsyncRun -mode=term -pos=right -cols=80 -focus=0 -cwd=$(VIM_FILEDIR) go test -v -run ' . l:name)
endfunction

function s:asyncrun_go_setup() abort
  command! -buffer -nargs=* -complete=dir GoRun
  \ AsyncRun -mode=term -pos=right -cols=80 -focus=0  go run $VIM_RELNAME
  command! -buffer -nargs=* -complete=dir GoTest
  \ AsyncRun -mode=term -pos=right -cols=80 -focus=0 go test <f-args>
  command! -buffer -nargs=0 GoTestPackage GoTest ./$VIM_RELDIR
  command! -buffer -nargs=0 GoTestFunc call s:asyncrun_gotest_func()

  nnoremap <silent> <buffer> <LocalLeader>r :<C-u>GoRun<CR>
  nnoremap <silent> <buffer> <LocalLeader>t :<C-u>GoTest ./...<CR>
  nnoremap <silent> <buffer> <LocalLeader>p :<C-u>GoTestPackage<CR>
  nnoremap <silent> <buffer> <LocalLeader>f :<C-u>GoTestFunc<CR>
endfunction

augroup vimrc_asyncrun
  au!
  autocmd FileType go call s:asyncrun_go_setup()
  autocmd FileType sh nnoremap <silent> <buffer> <LocalLeader>r
  \ :<C-u>AsyncRun -mode=term -pos=right -cols=80 -focus=0 sh $VIM_RELNAME<CR>
augroup END

" vim-altr
augroup vimrc_altr
  au!
  autocmd FileType go,vim,help nmap <buffer> <LocalLeader>a <Plug>(altr-forward)
  autocmd FileType go,vim,help nmap <buffer> <LocalLeader>b <Plug>(altr-back)
augroup END

" ----------------------------------------------------------------------------
" FileType
" ----------------------------------------------------------------------------
" vim-table-mode
let g:table_mode_corner = '|'
let g:table_mode_map_prefix = '<LocalLeader>'

" previm
augroup vimrc_previm
  au!
  autocmd FileType markdown nnoremap <buffer> <silent> <LocalLeader>p :<C-u>PrevimOpen<CR>
augroup END

" preview-markdown.vim
let g:preview_markdown_vertical = 1
let g:preview_markdown_parser = 'mdcat'
let g:preview_markdown_auto_update = 1
augroup vimrc_preview_markdown
  au!
  autocmd FileType markdown nnoremap <buffer> <silent> mp :<C-u>PreviewMarkdown<CR><BAR><C-w>w
augroup END

" ----------------------------------------------------------------------------
" Extention
" ----------------------------------------------------------------------------
" memolist.vim
let g:memolist_delimiter_yaml_start = '---'
let g:memolist_delimiter_yaml_end  = '---'
let g:memolist_memo_suffix = 'md'
let g:memolist_template_dir_path = expand(fnamemodify($MYVIMRC, ":h") . '/template/memotemplates')
let g:memolist_ex_cmd = 'CtrlP'
nnoremap <Leader>mn :<C-u>MemoNew<CR>
nnoremap <Leader>mg :<C-u>MemoGrep<CR>
nnoremap <Leader>ml :<C-u>MemoList<CR>

" winresizer
let g:winresizer_start_key = '<C-w>r'

" vim-signify
noremap <silent> <C-y> :SignifyToggle<CR>
noremap <silent> <Leader>gd :SignifyDiff<CR>
let g:signify_disable_by_default = 0

" vim-floaterm
let g:floaterm_autoclose = 2
let g:floaterm_width = 0.9
let g:floaterm_height = 0.9
nnoremap <silent> <F7>       :FloatermNew<CR>
tnoremap <silent> <F7>       <C-\><C-n>:FloatermNew<CR>
nnoremap <silent> <F8>       :FloatermPrev<CR>
tnoremap <silent> <F8>       <C-\><C-n>:FloatermPrev<CR>
nnoremap <silent> <F9>       :FloatermNext<CR>
tnoremap <silent> <F9>       <C-\><C-n>:FloatermNext<CR>
nnoremap <silent> <C-t>      :FloatermToggle<CR>
tnoremap <silent> <C-t>      <C-\><C-n>:FloatermToggle<CR>

" vim-qf-preview
let g:qfpreview = {
\ 'top': 'g',
\ 'bottom': 'G',
\ 'number': 1,
\ 'height': 20,
\ 'offset': 10,
\ 'next': 'n',
\ 'previous': 'p',
\ 'sign': {'linehl': 'CursorLine'}
\ }
augroup vimrc_qfpreview
  autocmd!
  autocmd FileType qf nmap <buffer> p <plug>(qf-preview-open)
augroup END

" gina.vim
function s:gina_settings() abort
  packadd gina.vim
  let s:gina_cmd_opt = {'noremap': 1, 'silent': 1}
  call gina#custom#command#option('status','-s')
  call gina#custom#command#option('commit', '-v')
  call gina#custom#command#option('show','--show-signature')

  call gina#custom#mapping#nmap('/.*', 'q', ':<C-U>bd<CR>', s:gina_cmd_opt)
  call gina#custom#mapping#nmap('status', '<C-^>', ':<C-u>Gina commit<CR>', s:gina_cmd_opt)
  call gina#custom#mapping#nmap('commit', '<C-^>', ':<C-u>Gina status<CR>', s:gina_cmd_opt)

  call gina#custom#mapping#nmap(
  \ 'status',
  \ 'p',
  \ ':<C-u>call gina#action#call(''diff:vsplit'')<CR>',
  \ s:gina_cmd_opt,
  \ )
  call gina#custom#mapping#nmap(
  \ '/\%(blame\|log\|reflog\)',
  \ 'p',
  \ ':<C-u>call gina#action#call(''show:commit:vsplit'')<CR>',
  \ s:gina_cmd_opt,
  \ )
endfunction

augroup vimrc_gina
  autocmd!
  autocmd CmdUndefined Gina call s:gina_settings()
augroup END

nnoremap <silent> <Leader>gs :<C-u>Gina status<CR>
nnoremap <silent> <Leader>gl :<C-u>Gina log --graph<CR>
nnoremap <silent> <Leader>gd :<C-u>Gina compare<CR>

" translate.vim
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_winsize = 10
xmap T <Plug>(VTranslate)
xmap <Leader>tR <Plug>(VTranslateBang)

" vim-quickhl
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)
