" ============================================================================
"  encoding {{{
" ============================================================================
set encoding=utf-8
scriptencoding utf-8

" }}}
" ============================================================================
" default {{{
" ============================================================================
unlet! skip_defaults_vim
silent! source $VIMRUNTIME/defaults.vim

" }}}
" ============================================================================
" VIM-PLUG BLOCK {{{
" ============================================================================
call plug#begin('~/.vim/plugged')

" Util
Plug 'hal0920/tender.vim'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'vim-jp/vimdoc-ja'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesToggle' }
Plug 'junegunn/vim-easy-align', { 'on': '<Plug>(EasyAlign)' }
Plug 'simeji/winresizer', { 'on': 'WinResizerStartResize' }

" Edit
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tyru/caw.vim'
Plug 'cohama/lexima.vim'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive', { 
    \ 'on': ['Git', 'Gcommit', 'Gstatus', 'Gdiff', 'Gblame', 'Glog']
    \ }

" Development
" lsp
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'liuchengxu/vista.vim', { 'on': ['Vista', 'Vista!!'] }
" auto complete
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
" snippet
Plug 'SirVer/ultisnips'
" lang
Plug 'fatih/vim-go', { 
    \ 'do': ':GoUpdateBinaries',
    \ 'for': 'go'
    \ }

" Document
Plug 'dhruvasagar/vim-table-mode', { 'for' : 'markdown' }
Plug 'iamcco/markdown-preview.vim', { 'for': 'markdown' }
Plug 'habamax/vim-asciidoctor', { 'for': 'asciidoc' }

call plug#end()

" }}}
" ============================================================================
" File types {{{
" ============================================================================
augroup vimrc_filetype
    autocmd!
    autocmd FileType gitcommit setlocal spell spelllang=cjk,en
    autocmd FileType text      setlocal textwidth=0
    autocmd FileType vim       setlocal foldmethod=marker
augroup END

" }}}
" ============================================================================
" mapping {{{
" ============================================================================
" set reader
let mapleader = "\<Space>"

" reload vimrc
nnoremap <Space>s :source $HOME/.vim/vimrc<CR>

" Clear search highlight
nnoremap <Esc><Esc> :nohlsearch<CR><Esc>

" Multi line move
noremap k gk
noremap j gj
noremap gk k
noremap gj j
noremap <Down> gj
noremap <Up> gk

" Move cursor like emacs in Insert Mode
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-a> <C-o>^
inoremap <C-e> <End>
inoremap <C-d> <Del>

" Move cursor like emacs in Insert Mode
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <HOME>
cnoremap <C-e> <END>

" Move cursor the begining and end of line
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $

" Move between windows
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W

" Not yank is delete operation
nnoremap x "_x
nnoremap s "_x

" Quit the current window
nnoremap <silent> <C-q> :q<CR>
inoremap <silent> <C-q> <Esc>:q<CR>
tnoremap <silent> <C-q> <C-w>N:q!<CR>

" open termianl in vertial split,new tab,current winddow
nnoremap ts :<C-u>terminal<CR>
nnoremap tv :<C-u>vsplit <BAR> terminal ++curwin<CR>
nnoremap tt :<C-u>tabnew <BAR> terminal ++curwin<CR>
nnoremap tw :<C-u>terminal ++curwin<CR>

" Use ESC to transition to terminal normal mode
tnoremap <F1> <ESC>
tnoremap <ESC> <C-w>N

" Toggle options
nmap [Toggle] <Nop>
map <Leader>o [Toggle]
nnoremap <silent> [Toggle]n :<C-u>setlocal relativenumber! relativenumber?<CR>
nnoremap <silent> [Toggle]w :<C-u>setlocal wrap! wrap?<CR>
nnoremap <silent> [Toggle]p :<C-u>set paste! paste?<CR>

" }}}
" ============================================================================
" options {{{
" ============================================================================

" Encoding
set fileencodings=utf-8
set fileformats=unix,dos,mac

" Don't creat swap files
set nobackup
set noswapfile
set noundofile

" Appearance
set wildmenu
set display=lastline
set laststatus=2
set cursorline
set number
set relativenumber
set wrap
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
set scrolloff=8
set showtabline=2
set synmaxcol=512
set showcmd
set signcolumn=yes

" buffer
set hidden
set switchbuf=useopen

" edit
set smarttab
set expandtab
set autoindent
set shiftwidth=4
set shiftround
set tabstop=4
set virtualedit=block,onemore
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start

" window
set splitbelow
set splitright
set winwidth=30
set winheight=1
set cmdwinheight=5
set noequalalways

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

" clipborad
set clipboard=unnamed

" Completion
set completeopt=menu,menuone,noinsert,noselect

" help
set helplang=ja,en

" vimfinfo
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo

" }}}
" ============================================================================
" Plugin setting {{{
" ============================================================================

" Util {{{

" fzf {{{

" key mappings
nnoremap <silent> <Leader>f :<C-u>Files<CR>
nnoremap <silent> <Leader>G :<C-u>GFiles?<CR>
nnoremap <silent> <Leader>b :<C-u>Buffers<CR>
nnoremap <silent> <Leader>R :<C-u>Rg<CR>
nnoremap <silent> <Leader>l :<C-u>BLines<CR>

" Files command with preview window
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Use fzf#vim#grep with ripgrep as Rg command
let g:rg_command = '
    \ rg --column --line-number --hidden --ignore-case --no-heading  --color "always"
    \ -g "!{.git,.svn,node_modules,vendor}/*" '
command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \ g:rg_command .shellescape(<q-args>), 1,
    \ <bang>0   ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
    \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', 'p'),
    \ <bang>0)

" Override Colors command. You can safely do this in your .vimrc as fzf.vim
" will not override existing commands.
command! -bang Colors
  \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

" fuzzy finder for C-x completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)

" }}}

" lightline
let g:lightline = {
    \ 'colorscheme': 'tender',
    \ }

" nerdtree 
let NERDTreeShowHidden=1
nmap <silent><c-e> :<c-u>NERDTreeToggle<CR>

" indentLine
let g:loaded_indentLine = 1
nnoremap <silent><c-d> :<c-u>IndentLinesToggle<CR>

" vim-easy-align
vmap <Enter> <Plug>(EasyAlign)

" winresizer.vim
let g:winresizer_start_key = '<C-w>r'
nnoremap <silent><C-w>r :<c-u>WinResizerStartResize<CR>

" }}}

" Edit {{{

" caw.vim
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
nmap <Leader>, <Plug>(caw:zeropos:toggle)
vmap <Leader>, <Plug>(caw:zeropos:toggle)

" }}}

" Git {{{

" vim-gitgutter
let g:gitgutter_map_keys = 0
map [g <Plug>GitGutterPrevHunk
nmap ]g <Plug>GitGutterNextHunk

" fugitive
nmap [fugitive] <Nop>
map <Leader>g [fugitive]
nnoremap <silent> [fugitive]c :<C-u>Gcommit<CR>
nnoremap <silent> [fugitive]d :<C-u>Gdiff<CR>
nnoremap <silent> [fugitive]b :<C-u>Gblame<CR>
nnoremap <silent> [fugitive]l :<C-u>Glog<CR>

" }}}

" Development {{{

" LSP {{{

" Enable auto complete
let g:lsp_async_completion = 1

" Enable Document diagnostics
let g:lsp_diagnostics_enabled = 1
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '◆'}

" golang
if executable('gopls')
    augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
    autocmd FileType go nmap gd <Plug>(lsp-definition)
    autocmd FileType go nmap K <Plug>(lsp-hover)
    augroup END
endif

if executable('pyls')
    augroup LspPython
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ 'workspace_config': {'pyls': 
        \   {'plugins': 
        \       {'pydocstyle': {'enabled': v:true}}
        \   }
        \ }
        \ })
    autocmd FileType python setlocal omnifunc=lsp#complete
    autocmd FileType python nmap gd <Plug>(lsp-definition)
    autocmd FileType python nmap K <Plug>(lsp-hover)
    augroup END
endif

" bash
if executable('bash-language-server')
    augroup LspBash
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'bash-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
        \ 'whitelist': ['sh'],
        \ })
    autocmd FileType sh setlocal omnifunc=lsp#complete
    autocmd FileType sh nmap gd <Plug>(lsp-definition)
    autocmd FIleType sh nmap K <Plug>(lsp-hover)
endif

" efm ( markdown and vim )
augroup LspEFM
  au!
  autocmd User lsp_setup call lsp#register_server({
   \ 'name': 'efm-langserver-erb',
   \ 'cmd': {server_info->['efm-langserver']},
   \ 'whitelist': ['vim','markdown'],
   \ })
augroup END

" Debugging
"let g:lsp_log_verbose = 1
"let g:lsp_log_file = expand('~/vim-lsp.log')
" for asyncomplete.vim log
" let g:asyncomplete_log_file = expand('~/asyncomplete.log')

" vista.vim
let g:vista_default_executive = 'vim_lsp'
nnoremap <silent><c-t> :<c-u>Vista!!<CR>
nnoremap <silent> <Leader>vf :<c-u>Vista finder vim_lsp<CR>
let g:vista#renderer#enable_icon = 0

" }}}

" asyncomplete {{{

" asyncomplete-ultisnips.
call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
    \ 'name': 'ultisnips',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
    \ }))

" }}}

" vim-go {{{

" Use vim-lsp
let g:go_code_completion_enabled = 0
let g:go_doc_keywordprg_enabled = 0
let g:go_def_mapping_enabled = 0

" hightlight
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1

" format
let g:go_fmt_command = 'goimports'

" lint
let g:go_metalinter_autosave = 1
let g:go_metalinter_command = 'golangci-lint'
let g:go_metalinter_autosave_enabled = ['golint', 'errcheck']

" list
let g:go_list_type = 'quickfix'

" mapping
augroup GoCommads
    autocmd!
    autocmd FileType go nmap <buffer> <silent> <F2> <Plug>(go-rename)
    autocmd FileType go nmap <buffer> <silent> <leader>r <Plug>(go-run)
    autocmd FileType go nmap <buffer> <silent> <leader>t <Plug>(go-test)
    autocmd FileType go nmap <buffer> <silent> <leader>v <Plug>(go-coverage-toggle)
    autocmd FileType go nmap <buffer> <silent> <Leader>ie <Plug>(go-iferr)
    autocmd FileType go nmap <buffer> <silent> <Leader>dl :<C-u>GoDecls<CR>
    autocmd FileType go nmap <buffer> <silent> <Leader>dd :<C-u>GoDeclsDir<CR>
augroup END

" }}}

" }}}

" Document {{{

" vim-table-mode
let g:table_mode_corner = '|'

" vim-asciidoctor
let g:asciidoctor_executable = 'asciidoctor'
let g:asciidoctor_extensions = ['asciidoctor-diagram']

" }}}

" }}}
" ============================================================================
" color {{{
" ============================================================================
filetype plugin indent on
syntax on
set background=dark
colorscheme tender

if exists('&termguicolors')
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

"}}}
" ============================================================================

