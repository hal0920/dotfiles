" ============================================================================
" Global options
" ============================================================================
set encoding=utf-8
scriptencoding utf-8

" Encoding
set fileencodings=utf-8,cp932
set fileformats=unix,dos,mac

" Don't creat swap files
set nobackup
set noswapfile
set noundofile

" Appearance
set wildmenu
set display=lastline
set laststatus=2
set cursorline
set wrap
set list
set listchars=tab:\ \ ,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
set scrolloff=8
set synmaxcol=256
set showcmd
set signcolumn=yes
set noshowmode
set showtabline=0
set background=dark
set diffopt^=vertical

" buffer
set hidden
set switchbuf=useopen

" edit
set smarttab
set expandtab
set autoindent
set shiftwidth=4
set shiftround
set tabstop=4
set virtualedit=block,onemore
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start

" window
set splitbelow
set splitright
set winwidth=30
set winheight=1
set cmdwinheight=5
set noequalalways

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

" clipborad
set clipboard=unnamed

" Completion
set completeopt=menuone,noinsert,noselect
set shortmess+=c

" help
set helplang=ja,en

" vimfinfo
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo

" undo
if has("persistent_undo")
  set undodir=$XDG_CACHE_HOME/vim/.undodir
  set undofile
endif

" Use true color in terminal
if exists('&termguicolors')
  set termguicolors
endif

" Use popup window with complete
if has('textprop')
  set completeopt+=popup
endif

" grep
if executable('rg')
  let &grepprg = 'rg --vimgrep --hidden'
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" ============================================================================
" Global variables
" ============================================================================
if has('vim_starting')
  " Use vertical bar cursor in Insert mode
  let &t_SI .= "\e[6 q"
  " Use Block cursor in Normal mode
  let &t_EI .= "\e[2 q"
  " Use Underline cursor in Replace mode
  let &t_SR .= "\e[4 q"

  if exists('$TMUX')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif

" Disable default plugin
let g:loaded_gzip               = 1
let g:loaded_tar                = 1
let g:loaded_tarPlugin          = 1
let g:loaded_zip                = 1
let g:loaded_zipPlugin          = 1
let g:loaded_rrhelper           = 1
let g:loaded_vimball            = 1
let g:loaded_vimballPlugin      = 1
let g:loaded_getscript          = 1
let g:loaded_getscriptPlugin    = 1
let g:loaded_netrw              = 1
let g:loaded_netrwPlugin        = 1
let g:loaded_netrwSettings      = 1
let g:loaded_netrwFileHandlers  = 1
let g:did_install_default_menus = 1
let g:skip_loading_mswin        = 1
let g:did_install_syntax_menu   = 1
let g:loaded_2html_plugin       = 1

" map leader
let g:mapleader = "\<Space>"
let g:maplocalleader = ','

" indent for Line continuation.(\)
let g:vim_indent_cont = 0

" markdown
let g:markdown_fenced_languages = [
\  'go',
\  'sh',
\  'json',
\  'yaml',
\  'java',
\]

" ============================================================================
" Plugin
" ============================================================================
call plug#begin(expand('$XDG_DATA_HOME/vim/plugged'))
" global
Plug 'crusoexia/vim-monokai'
Plug 'itchyny/lightline.vim'
Plug 'vim-jp/vimdoc-ja'
Plug 'cohama/lexima.vim'
Plug 'machakann/vim-sandwich'
Plug 'mattn/vim-findroot'
" fzf
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
" lsp
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
" filetype
Plug 'kana/vim-altr', { 'for': ['go', 'vim', 'sh'] }
Plug 'thinca/vim-quickrun', { 'for': ['go', 'vim', 'sh'] }
Plug 'janko/vim-test', { 'for': ['go', 'vim', 'sh'] }
Plug 'liuchengxu/vista.vim', { 'for': ['go', 'vim', 'sh'] }
Plug 'dhruvasagar/vim-table-mode', { 'for': 'markdown' }
Plug 'iamcco/markdown-preview.nvim', {
\ 'for': ['markdown', 'vim-plug'],
\ 'do': { -> mkdp#util#install() }
\ }
" Extention
Plug 'tyru/caw.vim', { 'on': '<Plug>(caw:zeropos:toggle)' }
Plug 'kana/vim-operator-user', { 'on': '<Plug>(operator-replace)' }
Plug 'kana/vim-operator-replace', { 'on': '<Plug>(operator-replace)' }
Plug 'glidenote/memolist.vim', { 'on': ['MemoNew', 'MemoList', 'MemoGrep'] }
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
Plug 'simeji/winresizer', { 'on': 'WinResizerStartResize' }
Plug 'mhinz/vim-signify', { 'on': ['SignifyToggle', 'SignifyDiff'] }
call plug#end()
" ============================================================================
" User config
" ============================================================================
" config directory
let g:my_config_dir = fnamemodify($MYVIMRC, ":h")

call map(
\ sort(split(globpath(g:my_config_dir . '/rc/', '*.vim'))),
\ {->[execute('exec "so" v:val')]}
\ )
